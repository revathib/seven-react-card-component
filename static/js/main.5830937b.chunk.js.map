{"version":3,"sources":["assets/img/tile.jpg","components/card/card.js","components/header/header.js","App.js","serviceWorker.js","index.js","assets/img/logo.png"],"names":["module","exports","Wrapper","styled","div","ViewBottom","BackgroundImage","img","ViewTop","Image","Text","p","Card","backgroundImage","onTopImage","text","src","Profile","User","Header","target","rel","href","logo","alt","createGlobalStyle","App","className","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kIAAAA,EAAOC,QAAU,IAA0B,kC,+6DCG3C,IAAMC,EAAUC,IAAOC,IAAV,KAKPC,EAAaF,IAAOC,IAAV,KAKVE,EAAkBH,IAAOI,IAAV,KA0BfC,EAAUL,IAAOC,IAAV,KAyBPK,EAAQN,IAAOI,IAAV,KAcLG,EAAOP,IAAOQ,EAAV,KA2BKC,EAZF,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,KAAhC,OACX,kBAACb,EAAD,KACE,kBAACG,EAAD,KACE,kBAACC,EAAD,CAAiBU,IAAKH,KAExB,kBAACL,EAAD,KACE,kBAACC,EAAD,CAAOO,IAAKF,IACZ,kBAACJ,EAAD,KAAOK,M,oeChGb,IAAMb,EAAUC,IAAOC,IAAV,KAKPa,EAAUd,IAAOC,IAAV,KAKPK,EAAQN,IAAOI,IAAV,KAMLW,EAAOf,IAAOC,IAAV,KAgBKe,EAXA,kBACb,kBAAC,EAAD,KACE,kBAACF,EAAD,KACE,uBAAGG,OAAO,SAASC,IAAI,sBAAsBC,KAAK,8BAChD,kBAAC,EAAD,CAAON,IAAKO,IAAMC,IAAI,YAG1B,kBAACN,EAAD,Q,kdCvBJO,YAAiB,KAoCFC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMd,gBAAiBe,IAAOd,WAAYA,IAAYC,KAAK,oBC3B7Cc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B/C,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.5830937b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tile.25b4e634.jpg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  flex: 1;\r\n  align-items: center;\r\n  padding: 1%;\r\n`;\r\nconst ViewBottom = styled.div`\r\n  position: absolute;\r\n  width: 230px;\r\n  height: 200px;\r\n`;\r\nconst BackgroundImage = styled.img`\r\n  flex: 1;\r\n  flex-direction: column;\r\n  width: 230px;\r\n  height: 200px;\r\n  margin: 20px 60px;\r\n  @media (min-width: 768px) {\r\n    width: 230px;\r\n    margin: 162px 61px;\r\n  }\r\n  @media (min-width: 600px) {\r\n    width: 230px;\r\n    margin: 180px 61px;\r\n  }\r\n  @media (min-width: 320px) {\r\n    width: 350px;\r\n    height: 200px;\r\n    margin: 17px 30px;\r\n  }\r\n  @media (min-width: 480px) {\r\n    width: 350px;\r\n    height: 200px;\r\n    margin: 17px 30px;\r\n  }\r\n`;\r\n\r\nconst ViewTop = styled.div`\r\n  opacity: 0.5;\r\n  background-color: black;\r\n  width: 231px;\r\n  margin: 146px 61px;\r\n  @media (min-width: 768px) {\r\n    width: 230px;\r\n    margin: 162px 61px;\r\n  }\r\n  @media (min-width: 600px) {\r\n    width: 230px;\r\n    margin: 180px 61px;\r\n  }\r\n  @media (min-width: 480px) {\r\n    width: 351px;\r\n    height: 45px;\r\n    margin: 172px 30px;\r\n  }\r\n  @media (min-width: 320px) {\r\n    width: 351px;\r\n    height: 45px;\r\n    margin: 172px 30px;\r\n  }\r\n`;\r\n\r\nconst Image = styled.img`\r\n  background-color: rgba(0, 0, 0, 0);\r\n  width: 40px;\r\n  float: left;\r\n  ::before,\r\n  ::after {\r\n    content: '';\r\n    display: table;\r\n  }\r\n  ::after {\r\n    clear: both;\r\n  }\r\n`;\r\n\r\nconst Text = styled.p`\r\n  font-size: 14px;\r\n  background-color: black;\r\n  color: white;\r\n  font-weight: bold;\r\n  line-height: 2.5em;\r\n  ::after {\r\n    content: '';\r\n    display: table;\r\n  }\r\n  ::after {\r\n    clear: both;\r\n  }\r\n`;\r\n\r\nconst Card = ({ backgroundImage, onTopImage, text }) => (\r\n  <Wrapper>\r\n    <ViewBottom>\r\n      <BackgroundImage src={backgroundImage} />\r\n    </ViewBottom>\r\n    <ViewTop>\r\n      <Image src={onTopImage}></Image>\r\n      <Text>{text}</Text>\r\n    </ViewTop>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport logo from '../../../src/assets/img/logo.png';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  padding: 1rem 0 0.65625rem;\r\n`;\r\n\r\nconst Profile = styled.div`\r\n  flex: 1 0 0;\r\n  margin: 0 0.3rem;\r\n`;\r\n\r\nconst Image = styled.img`\r\n  border-radius: 0.35rem;\r\n  display: block;\r\n  width: 40%;\r\n`;\r\n\r\nconst User = styled.div`\r\n  flex: 9 0 0;\r\n  margin: 0 0.3rem;\r\n`;\r\n\r\nconst Header = () => (\r\n  <Wrapper>\r\n    <Profile>\r\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://sevengroup.com.au/\">\r\n        <Image src={logo} alt=\"Seven\" />\r\n      </a>\r\n    </Profile>\r\n    <User>{/* User details */}</User>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\n//local imports\nimport Card from '../src/components/card/card';\nimport Header from '../src/components/header/header';\nimport title from '../src/assets/img/tile.jpg';\nimport onTopImage from '../src/assets/img/logo.png';\n\ncreateGlobalStyle`\n  html {\n    color: #292f33;\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    line-height: 1.3125;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n\n  @media screen and (min-width: 360px) {\n    html {\n      font-size: 15px;\n    }\n  }\n\n  @media screen and (min-width: 600px) {\n    html {\n      font-size: 16px;\n    }\n  }\n`;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Card backgroundImage={title} onTopImage={onTopImage} text=\"Home and Away\"></Card>\n      {/* <Card backgroundImage={title} onTopImage={onTopImage} text=\"Home and Away\"></Card> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.2a3f011a.png\";"],"sourceRoot":""}